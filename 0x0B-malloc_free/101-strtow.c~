#include "main.h"
#include <stdlib.h>

/**
 * word_count - Counts the number of words in a string.
 * @str: The string.
 *
 * Return: The number of words in the string.
 */
int word_count(char *str)
{
    int i, words = 0;

    for (i = 0; str[i]; i++)
        if ((str[i] != ' ' && str[i + 1] == ' ') || (str[i] != ' ' && str[i + 1] == '\0'))
            words++;

    return (words);
}

/**
 * allocate_word - Allocates memory for a word.
 * @str: The string.
 * @start: The start index of the word.
 *
 * Return: Pointer to the allocated memory containing the word.
 */
char *allocate_word(char *str, int start)
{
    int len = 0, k = 0;
    char *word;
    
    while (str[start + len] != ' ' && str[start + len] != '\0')
        len++;

    word = malloc(sizeof(char) * (len + 1));
    if (word == NULL)
        return (NULL);

    while (k < len)
    {
        word[k] = str[start + k];
        k++;
    }
    word[k] = '\0';

    return (word);
}

/**
 * strtow - Splits a string into words.
 * @str: The string.
 *
 * Return: Pointer to an array of strings (words),
 *         or NULL if failure.
 */
char **strtow(char *str)
{
    int i, l = 0, words;
    char **tab;

    if (str == NULL || *str == '\0')
        return (NULL);

    words = word_count(str);
    if (words == 0)
        return (NULL);

    tab = malloc(sizeof(char *) * (words + 1));
    if (tab == NULL)
        return (NULL);

    for (i = 0; i < words; l++)
    {
        if (str[l] != ' ' && (l == 0 || str[l - 1] == ' '))
        {
            tab[i] = allocate_word(str, l);
            if (tab[i] == NULL)
            {
                while (i >= 0)
                    free(tab[i--]);
                free(tab);
                return (NULL);
            }
            i++;
            while (str[l] != ' ' && str[l] != '\0')
                l++;
        }
    }
    tab[i] = NULL;

    return (tab);
}
